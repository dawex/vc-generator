openapi: 3.0.3
info:
  title: VC Generator - API
  version: 1.0.0
  description: |-
    VC Generator - API

    We use the API Specification to describe each endpoint. The API self-description also contains type information to help you error-check your requests.

    # Authentication

    Bearer token - Auth is NOT PROVIDED here - could be a bearer token in production env. 

    <!-- ReDoc-Inject: <security-definitions> -->
  contact:
    name: Developers Contact
    email: developers@example.com
  license:
    name: private-license
    url: https://example.com/cgu
servers:
  - url: https://example-test.com/v1
    description: API base url.
security:
  - bearerAuth: []
paths:
  /healthcheck:
    get:
      tags:
        - Healthcheck
      summary: Health Check
      description: The healthcheck endpoint retrieve 200 code if service is up.
      operationId: getHealth
      responses:
        '200':
          description: Successful operation.
        '400':
          $ref: '#/components/responses/400_Error'
        '500':
          $ref: '#/components/responses/500_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://example-test.com/v1/healthcheck \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://example-test.com/v1/healthcheck")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/healthcheck\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/healthcheck');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/v1/healthcheck", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/healthcheck",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  /negotiation-contracts:
    get:
      tags:
        - Negotiation-Contracts
      summary: List Negotiation Contracts
      description: List Negociation Contracts associated to the unique contractId.
      operationId: listNegotiationContracts
      parameters:
        - $ref: '#/components/parameters/query_contractId'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/negotiationContract'
        '400':
          $ref: '#/components/responses/400_Error'
        '500':
          $ref: '#/components/responses/500_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://example-test.com/v1/negotiation-contracts?contractId=uktdqs4661qsdqs664141' \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://example-test.com/v1/negotiation-contracts?contractId=uktdqs4661qsdqs664141")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/negotiation-contracts?contractId=uktdqs4661qsdqs664141\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/negotiation-contracts');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString([
              'contractId' => 'uktdqs4661qsdqs664141'
            ]));

            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/v1/negotiation-contracts?contractId=uktdqs4661qsdqs664141", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/negotiation-contracts?contractId=uktdqs4661qsdqs664141",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
    post:
      tags:
        - Negotiation-Contracts
      summary: Save Negotiation Contract
      description: Save incoming negotiation contract from 'Upcast Negotiation Plugin'.
      operationId: saveNegotiationContract
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/negotiationContract'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/negotiationContract'
        '400':
          $ref: '#/components/responses/400_Error'
        '500':
          $ref: '#/components/responses/500_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://example-test.com/v1/negotiation-contracts \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"id":"string","title":"string","type":"string","consumer_id":"string","producer_id":"string","data_processing_workflow_object":"string","natural_language_document":"string","resource_description_object":{},"odrl_policy":{},"negotiation_id":"string","created_at":"2019-08-24T14:15:22Z","updated_at":"2019-08-24T14:15:22Z"}'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://example-test.com/v1/negotiation-contracts")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .header("content-type", "application/json")
              .body("{\"id\":\"string\",\"title\":\"string\",\"type\":\"string\",\"consumer_id\":\"string\",\"producer_id\":\"string\",\"data_processing_workflow_object\":\"string\",\"natural_language_document\":\"string\",\"resource_description_object\":{},\"odrl_policy\":{},\"negotiation_id\":\"string\",\"created_at\":\"2019-08-24T14:15:22Z\",\"updated_at\":\"2019-08-24T14:15:22Z\"}")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/negotiation-contracts\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\",\\\"consumer_id\\\":\\\"string\\\",\\\"producer_id\\\":\\\"string\\\",\\\"data_processing_workflow_object\\\":\\\"string\\\",\\\"natural_language_document\\\":\\\"string\\\",\\\"resource_description_object\\\":{},\\\"odrl_policy\\\":{},\\\"negotiation_id\\\":\\\"string\\\",\\\"created_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"updated_at\\\":\\\"2019-08-24T14:15:22Z\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"id":"string","title":"string","type":"string","consumer_id":"string","producer_id":"string","data_processing_workflow_object":"string","natural_language_document":"string","resource_description_object":{},"odrl_policy":{},"negotiation_id":"string","created_at":"2019-08-24T14:15:22Z","updated_at":"2019-08-24T14:15:22Z"}');

            $request->setRequestUrl('https://example-test.com/v1/negotiation-contracts');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN',
              'content-type' => 'application/json'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            payload = "{\"id\":\"string\",\"title\":\"string\",\"type\":\"string\",\"consumer_id\":\"string\",\"producer_id\":\"string\",\"data_processing_workflow_object\":\"string\",\"natural_language_document\":\"string\",\"resource_description_object\":{},\"odrl_policy\":{},\"negotiation_id\":\"string\",\"created_at\":\"2019-08-24T14:15:22Z\",\"updated_at\":\"2019-08-24T14:15:22Z\"}"

            headers = {
                'Authorization': "Bearer REPLACE_BEARER_TOKEN",
                'content-type': "application/json"
                }

            conn.request("POST", "/v1/negotiation-contracts", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/negotiation-contracts",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN",
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              id: 'string',
              title: 'string',
              type: 'string',
              consumer_id: 'string',
              producer_id: 'string',
              data_processing_workflow_object: 'string',
              natural_language_document: 'string',
              resource_description_object: {},
              odrl_policy: {},
              negotiation_id: 'string',
              created_at: '2019-08-24T14:15:22Z',
              updated_at: '2019-08-24T14:15:22Z'
            }));
            req.end();
  /compliance-logs:
    get:
      tags:
        - Compliance-Logs
      summary: List Compliance Logs
      description: List Compliance Logs associated to the couple contractId and executionId.
      operationId: listComplianceLogs
      parameters:
        - $ref: '#/components/parameters/query_contractId'
        - $ref: '#/components/parameters/query_executionId'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/complianceLog'
        '400':
          $ref: '#/components/responses/400_Error'
        '500':
          $ref: '#/components/responses/500_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://example-test.com/v1/compliance-logs?contractId=uktdqs4661qsdqs664141&executionId=uktdqs4661qsdqs664141' \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://example-test.com/v1/compliance-logs?contractId=uktdqs4661qsdqs664141&executionId=uktdqs4661qsdqs664141")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/compliance-logs?contractId=uktdqs4661qsdqs664141&executionId=uktdqs4661qsdqs664141\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/compliance-logs');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString([
              'contractId' => 'uktdqs4661qsdqs664141',
              'executionId' => 'uktdqs4661qsdqs664141'
            ]));

            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/v1/compliance-logs?contractId=uktdqs4661qsdqs664141&executionId=uktdqs4661qsdqs664141", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/compliance-logs?contractId=uktdqs4661qsdqs664141&executionId=uktdqs4661qsdqs664141",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
    post:
      tags:
        - Compliance-Logs
      summary: Save Compliance Log
      description: Save incoming compliance log from 'Upcast Compliance Plugin'.
      operationId: saveComplianceLog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/complianceLogIn'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/complianceLog'
        '400':
          $ref: '#/components/responses/400_Error'
        '500':
          $ref: '#/components/responses/500_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://example-test.com/v1/compliance-logs \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"contractId":"gfjfgd45555sd5s5s5s5s","executionId":"uktdqs4661qsdqs664141","monitoringEvent":{"source":"transfer-plugin","timestamp":"2025-02-26T13:28:09Z","metric":"action-start","value":"calculation of statistics","log":"Root WebApplicationContext: initialization completed in 2758 ms","params":["string"],"result":"string","group":"string"},"complianceLogs":[{"log_lvl":"ALERT","log_msg":"rule violation","rule_num":"1","rule_context":"1","rule_expr":"'\''adm'\'' in $groups"}]}'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://example-test.com/v1/compliance-logs")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .header("content-type", "application/json")
              .body("{\"contractId\":\"gfjfgd45555sd5s5s5s5s\",\"executionId\":\"uktdqs4661qsdqs664141\",\"monitoringEvent\":{\"source\":\"transfer-plugin\",\"timestamp\":\"2025-02-26T13:28:09Z\",\"metric\":\"action-start\",\"value\":\"calculation of statistics\",\"log\":\"Root WebApplicationContext: initialization completed in 2758 ms\",\"params\":[\"string\"],\"result\":\"string\",\"group\":\"string\"},\"complianceLogs\":[{\"log_lvl\":\"ALERT\",\"log_msg\":\"rule violation\",\"rule_num\":\"1\",\"rule_context\":\"1\",\"rule_expr\":\"'adm' in $groups\"}]}")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/compliance-logs\"\n\n\tpayload := strings.NewReader(\"{\\\"contractId\\\":\\\"gfjfgd45555sd5s5s5s5s\\\",\\\"executionId\\\":\\\"uktdqs4661qsdqs664141\\\",\\\"monitoringEvent\\\":{\\\"source\\\":\\\"transfer-plugin\\\",\\\"timestamp\\\":\\\"2025-02-26T13:28:09Z\\\",\\\"metric\\\":\\\"action-start\\\",\\\"value\\\":\\\"calculation of statistics\\\",\\\"log\\\":\\\"Root WebApplicationContext: initialization completed in 2758 ms\\\",\\\"params\\\":[\\\"string\\\"],\\\"result\\\":\\\"string\\\",\\\"group\\\":\\\"string\\\"},\\\"complianceLogs\\\":[{\\\"log_lvl\\\":\\\"ALERT\\\",\\\"log_msg\\\":\\\"rule violation\\\",\\\"rule_num\\\":\\\"1\\\",\\\"rule_context\\\":\\\"1\\\",\\\"rule_expr\\\":\\\"'adm' in $groups\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"contractId":"gfjfgd45555sd5s5s5s5s","executionId":"uktdqs4661qsdqs664141","monitoringEvent":{"source":"transfer-plugin","timestamp":"2025-02-26T13:28:09Z","metric":"action-start","value":"calculation of statistics","log":"Root WebApplicationContext: initialization completed in 2758 ms","params":["string"],"result":"string","group":"string"},"complianceLogs":[{"log_lvl":"ALERT","log_msg":"rule violation","rule_num":"1","rule_context":"1","rule_expr":"'adm' in $groups"}]}');

            $request->setRequestUrl('https://example-test.com/v1/compliance-logs');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN',
              'content-type' => 'application/json'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            payload = "{\"contractId\":\"gfjfgd45555sd5s5s5s5s\",\"executionId\":\"uktdqs4661qsdqs664141\",\"monitoringEvent\":{\"source\":\"transfer-plugin\",\"timestamp\":\"2025-02-26T13:28:09Z\",\"metric\":\"action-start\",\"value\":\"calculation of statistics\",\"log\":\"Root WebApplicationContext: initialization completed in 2758 ms\",\"params\":[\"string\"],\"result\":\"string\",\"group\":\"string\"},\"complianceLogs\":[{\"log_lvl\":\"ALERT\",\"log_msg\":\"rule violation\",\"rule_num\":\"1\",\"rule_context\":\"1\",\"rule_expr\":\"'adm' in $groups\"}]}"

            headers = {
                'Authorization': "Bearer REPLACE_BEARER_TOKEN",
                'content-type': "application/json"
                }

            conn.request("POST", "/v1/compliance-logs", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/compliance-logs",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN",
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              contractId: 'gfjfgd45555sd5s5s5s5s',
              executionId: 'uktdqs4661qsdqs664141',
              monitoringEvent: {
                source: 'transfer-plugin',
                timestamp: '2025-02-26T13:28:09Z',
                metric: 'action-start',
                value: 'calculation of statistics',
                log: 'Root WebApplicationContext: initialization completed in 2758 ms',
                params: ['string'],
                result: 'string',
                group: 'string'
              },
              complianceLogs: [
                {
                  log_lvl: 'ALERT',
                  log_msg: 'rule violation',
                  rule_num: '1',
                  rule_context: '1',
                  rule_expr: '\'adm\' in $groups'
                }
              ]
            }));
            req.end();
  /verifiable-credential:
    get:
      tags:
        - Verifiable-Credential
      summary: List Signed Verifiable Credentials
      description: List all signed Verifiable Credentials.
      operationId: listVerifiableCredentials
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/vc-signed'
        '400':
          $ref: '#/components/responses/400_Error'
        '500':
          $ref: '#/components/responses/500_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://example-test.com/v1/verifiable-credential \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://example-test.com/v1/verifiable-credential")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/verifiable-credential\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/verifiable-credential');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/v1/verifiable-credential", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/verifiable-credential",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  /verifiable-credential/publicKey:
    get:
      tags:
        - Verifiable-Credential
      summary: Get Public Key
      description: Get public key for any VC validation process.
      operationId: getPublicKey
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicKey'
        '400':
          $ref: '#/components/responses/400_Error'
        '500':
          $ref: '#/components/responses/500_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://example-test.com/v1/verifiable-credential/publicKey \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://example-test.com/v1/verifiable-credential/publicKey")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/verifiable-credential/publicKey\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/verifiable-credential/publicKey');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/v1/verifiable-credential/publicKey", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/verifiable-credential/publicKey",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  /verifiable-credential/_sign:
    post:
      tags:
        - Verifiable-Credential
      summary: Sign Verifiable Credential for Dataset Execution
      description: Sign one Verifiable Credential containing all saved events base on dataset execution identified with contractId and executionId.
      operationId: signVerifiableCredential
      parameters:
        - $ref: '#/components/parameters/query_contractId'
        - $ref: '#/components/parameters/query_executionId'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vc-signed'
        '400':
          $ref: '#/components/responses/400_Error'
        '500':
          $ref: '#/components/responses/500_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url 'https://example-test.com/v1/verifiable-credential/_sign?contractId=uktdqs4661qsdqs664141&executionId=uktdqs4661qsdqs664141' \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://example-test.com/v1/verifiable-credential/_sign?contractId=uktdqs4661qsdqs664141&executionId=uktdqs4661qsdqs664141")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/verifiable-credential/_sign?contractId=uktdqs4661qsdqs664141&executionId=uktdqs4661qsdqs664141\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/verifiable-credential/_sign');
            $request->setRequestMethod('POST');
            $request->setQuery(new http\QueryString([
              'contractId' => 'uktdqs4661qsdqs664141',
              'executionId' => 'uktdqs4661qsdqs664141'
            ]));

            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("POST", "/v1/verifiable-credential/_sign?contractId=uktdqs4661qsdqs664141&executionId=uktdqs4661qsdqs664141", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/verifiable-credential/_sign?contractId=uktdqs4661qsdqs664141&executionId=uktdqs4661qsdqs664141",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ModelError:
      description: A representation of an errorMessage
      type: object
      properties:
        errorMessage:
          type: string
          description: error Message
    negotiationContract:
      type: object
      description: Negociation Contract.
      required:
        - type
        - consumer_id
        - producer_id
        - data_processing_workflow_object
        - natural_language_document
        - resource_description_object
        - odrl_policy
      properties:
        id:
          type: string
          description: ' Id'
        title:
          type: string
          description: Title
        type:
          type: string
          description: Type
        consumer_id:
          type: string
          description: Consumer Id
        producer_id:
          type: string
          description: Producer Id
        data_processing_workflow_object:
          type: string
          description: Data Processing Workflow Object
        natural_language_document:
          type: string
          description: Natural Language Document
        resource_description_object:
          type: object
          description: upcastResourceDescriptionObject
        odrl_policy:
          type: object
          description: Odrl Policy
        negotiation_id:
          type: string
          description: Negotiation Id
        created_at:
          type: string
          format: date-time
          description: Created At
        updated_at:
          type: string
          format: date-time
          description: Updated At
    id:
      type: string
      description: The unique ID.
      pattern: ^[-_0-9a-zA-Z]+$
      minLength: 36
      maxLength: 36
      example: b76c02d2-f68f-4ab1-bb97-c75f357c2a75
      x-go-type: googleuuid.UUID
      x-go-type-import:
        path: github.com/google/uuid
        name: googleuuid
    monitoringEvent:
      type: object
      description: Monitoring Event.
      required:
        - source
        - timestamp
        - metric
        - value
        - log
      properties:
        source:
          type: string
          description: The name of the source component that emits the JSON object. Each component that implements the execution flow has a unique name.
          example: transfer-plugin
          x-oapi-codegen-extra-tags:
            validate: required
        timestamp:
          type: string
          format: date-time
          description: The date/time when the credential was issued, in ISO 8601 date-time format.
          example: '2025-02-26T13:28:09Z'
          x-oapi-codegen-extra-tags:
            validate: required
        metric:
          type: string
          description: The name of the metric that is reported.
          example: action-start
          x-oapi-codegen-extra-tags:
            validate: required
        value:
          type: string
          description: The value of the metric that is reported, e.g., the name of the action that is started.
          example: calculation of statistics
          x-oapi-codegen-extra-tags:
            validate: required
        log:
          type: string
          description: Log message that contains details of the monitored metric.
          example: 'Root WebApplicationContext: initialization completed in 2758 ms'
          x-oapi-codegen-extra-tags:
            validate: required
        params:
          type: array
          description: The parameters of the metric that is reported.
          items:
            type: string
          x-oapi-codegen-extra-tags:
            validate: required
        result:
          type: string
          description: Result of the monitored metric.
        group:
          type: string
          description: Group of the monitored metric.
    complianceAuditLog:
      type: object
      description: Compliance Audit Log.
      required:
        - log_lvl
        - log_msg
        - rule_num
        - rule_context
        - rule_expr
      properties:
        log_lvl:
          type: string
          description: Log level.
          example: ALERT
          x-oapi-codegen-extra-tags:
            validate: required
        log_msg:
          type: string
          description: Log message.
          example: rule violation
          x-oapi-codegen-extra-tags:
            validate: required
        rule_num:
          type: string
          description: Rule number.
          example: '1'
          x-oapi-codegen-extra-tags:
            validate: required
        rule_context:
          type: string
          description: Rule context.
          example: '1'
          x-oapi-codegen-extra-tags:
            validate: required
        rule_expr:
          type: string
          description: Rule expression.
          example: '''adm'' in $groups'
          x-oapi-codegen-extra-tags:
            validate: required
    complianceLogIn:
      type: object
      description: Compliance Log to save.
      required:
        - contractId
        - executionId
        - monitoringEvent
        - complianceLogs
      properties:
        contractId:
          type: string
          description: A unique identifier for the contract. The contract with contract-id identifies the producer, the consumer, the dataset and the workflow that will be executed on it.
          example: gfjfgd45555sd5s5s5s5s
          x-oapi-codegen-extra-tags:
            validate: required
        executionId:
          type: string
          description: A unique identifier for the execution. Each dataset consumer assigns a unique id to each such execution for a given contract.
          example: uktdqs4661qsdqs664141
          x-oapi-codegen-extra-tags:
            validate: required
        monitoringEvent:
          $ref: '#/components/schemas/monitoringEvent'
          x-oapi-codegen-extra-tags:
            validate: required,dive
        complianceLogs:
          type: array
          items:
            $ref: '#/components/schemas/complianceAuditLog'
          x-oapi-codegen-extra-tags:
            validate: required,dive
    complianceLog:
      type: object
      description: Compliance Log.
      required:
        - id
        - createdAt
      allOf:
        - properties:
            id:
              $ref: '#/components/schemas/id'
            createdAt:
              type: string
              format: date-time
              description: Created date.
              example: '2024-08-30T14:48:15.062268031+02:00'
        - $ref: '#/components/schemas/complianceLogIn'
    type:
      type: string
      description: VC Type
      enum:
        - VerifiableCredential
      x-oapi-codegen-extra-tags:
        validate: required,oneof=VerifiableCredential
    complianceAudit:
      type: object
      description: Compliance Audit.
      required:
        - monitoringEvent
        - complianceLogs
      properties:
        monitoringEvent:
          $ref: '#/components/schemas/monitoringEvent'
          x-oapi-codegen-extra-tags:
            validate: required,dive
        complianceLogs:
          type: array
          items:
            $ref: '#/components/schemas/complianceAuditLog'
          x-oapi-codegen-extra-tags:
            validate: required,dive
    credentialSubject:
      type: object
      description: VC subject.
      required:
        - id
        - executionId
        - monitoringEvents
      properties:
        id:
          type: string
          description: A unique identifier for the contract. The contract with contract-id identifies the producer, the consumer, the dataset and the workflow that will be executed on it.
          example: gfjfgd45555sd5s5s5s5s
          x-oapi-codegen-extra-tags:
            validate: required
        executionId:
          type: string
          description: A unique identifier for the execution. Each dataset consumer assigns a unique id to each such execution for a given contract.
          example: uktdqs4661qsdqs664141
          x-oapi-codegen-extra-tags:
            validate: required
        contract:
          $ref: '#/components/schemas/negotiationContract'
        complianceAudit:
          type: array
          items:
            $ref: '#/components/schemas/complianceAudit'
          x-oapi-codegen-extra-tags:
            validate: required,dive
    issuer:
      type: object
      description: VC issuer.
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: A unique identifier for the issuer.
          example: urn:uuid:c56728f7-43b3-4d70-91fc-2b730fd4cd9e
          x-oapi-codegen-extra-tags:
            validate: required
        name:
          type: string
          description: Name of the issuer.
          example: Issuer Organization
          x-oapi-codegen-extra-tags:
            validate: required
    proof:
      type: object
      description: VC Proof.
      required:
        - created
        - jws
        - proofPurpose
        - type
        - verificationMethod
      properties:
        created:
          type: string
          format: date-time
          description: The creation date of the proof.
          example: '2025-02-26T13:28:09Z'
          x-oapi-codegen-extra-tags:
            validate: required
        jws:
          type: string
          description: Encrypted JWS (JSON Web Signature).
          example: ewogICJhbGciOiAiUlMyNTYiLAogICJraWQiOiAiMTMzNzQ3MTQxMjU1IiwKICAiaWF0IjogMCwKICAiaXNzIjogIkM9R0IsIEw9TG9uZG9uLCBPVT1OdWFwYXkgQVBJLCBPPU51YXBheSwgQ049eWJvcXlheTkycSIsCiAgImI2NCI6IGZhbHNlLAogICJjcml0IjogWwogICAgImlhdCIsCiAgICAiaXNzIiwKICAgICJiNjQiCiAgXQp9..d_cZ46lwNiaFHAu_saC-Zz4rSzNbevWirO94EmBlbOwkB1L78vGbAnNjUsmFSU7t_HhL-cyMiQUDyRWswsEnlDljJsRi8s8ft48ipy2SMuZrjPpyYYMgink8nZZK7l-eFJcTiS9ZWezAAXF_IJFXSTO5ax9z6xty3zTNPNMV9W7aH8fEAvbUIiueOhH5xNHcsuqlOGygKdFz2rbjTGffoE_6zS4Dry-uX5mts2duLorobUimGsdlUcSM6P6vZEtcXaJCdjrT9tuFMh4CkX9nqk19Bq2z3i-SX4JCPvhD2r3ghRmX0gG08UcvyFVbrnVZJnpl4MU8V4Nr3-2M5URZOg
          x-oapi-codegen-extra-tags:
            validate: required
        proofPurpose:
          type: string
          description: Indicate "assertionMethod" which is the general case to say that the issuer ensures the authenticity of the claims (in accordance with the VC Data Model).
          example: assertionMethod
          enum:
            - assertionMethod
          x-oapi-codegen-extra-tags:
            validate: required,oneof=assertionMethod
        type:
          type: string
          description: We specify the type of key used to sign credential.
          example: Ed25519Signature2018
          enum:
            - Ed25519Signature2018
          x-oapi-codegen-extra-tags:
            validate: required,oneof=Ed25519Signature2018
        verificationMethod:
          type: string
          description: The identifier of the issuer's public key.
          example: urn:uuid:c56728f7-43b3-4d70-91fc-2b730fd4cd9e#key
          x-oapi-codegen-extra-tags:
            validate: required
    vc-signed:
      type: object
      description: VC model.
      required:
        - '@context'
        - id
        - type
        - credentialSubject
        - issuer
        - issuanceDate
        - proof
      properties:
        '@context':
          type: array
          description: One or more JSON-LD contexts that allow interpreting the terms used. By default, every VC includes the base W3C Credentials context.
          minItems: 1
          items:
            type: string
            example: https://www.w3.org/2018/credentials/v1
            x-oapi-codegen-extra-tags:
              validate: required,url
          x-oapi-codegen-extra-tags:
            validate: required,dive
        id:
          type: string
          description: A unique identifier for the credential.
          example: urn:uuid:becc8aaf-be3d-49cd-bd68-ddd9a6e5fe7e
          x-oapi-codegen-extra-tags:
            validate: required
        type:
          type: array
          description: |-
            One or more types for the credential. It must include "VerifiableCredential" plus a specific type defining the nature of the credential :
              - VerifiableCredential : define the core structure of the credential,
          minItems: 1
          example:
            - VerifiableCredential
          items:
            $ref: '#/components/schemas/type'
          x-oapi-codegen-extra-tags:
            validate: required,dive
        credentialSubject:
          $ref: '#/components/schemas/credentialSubject'
          x-oapi-codegen-extra-tags:
            validate: required,dive
        issuer:
          $ref: '#/components/schemas/issuer'
          x-oapi-codegen-extra-tags:
            validate: required,dive
        issuanceDate:
          type: string
          format: date-time
          description: The date/time when the credential was issued, in ISO 8601 date-time format.
          example: '2025-02-26T13:28:09Z'
          x-oapi-codegen-extra-tags:
            validate: required
        proof:
          $ref: '#/components/schemas/proof'
          x-oapi-codegen-extra-tags:
            validate: required,dive
    publicKey:
      type: object
      description: Public key object.
      required:
        - type
        - key
      properties:
        type:
          type: string
          description: We specify the type of key.
          example: Ed25519
          enum:
            - Ed25519
          x-oapi-codegen-extra-tags:
            validate: required,oneof=Ed25519
        key:
          type: string
          description: Public Key (hexadecimal encoded).
          example: e84e39caaa5600b0e4461d72f9deb1737c52de49155263cc718368a49ceb4768
          x-oapi-codegen-extra-tags:
            validate: required
  responses:
    400_Error:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
          example:
            errorMessage: Bad Request
    500_Error:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
          example:
            errorMessage: Internal Server Error
  parameters:
    query_contractId:
      name: contractId
      in: query
      required: true
      description: A unique identifier for the contract.
      schema:
        type: string
        example: uktdqs4661qsdqs664141
      x-oapi-codegen-extra-tags:
        validate: required
    query_executionId:
      name: executionId
      in: query
      required: true
      description: A unique identifier for the execution. Each dataset consumer assigns a unique id to each such execution for a given contract.
      schema:
        type: string
        example: uktdqs4661qsdqs664141
      x-oapi-codegen-extra-tags:
        validate: required
